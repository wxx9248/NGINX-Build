name: build
on:
    # Triggers the workflow on push or pull request events but only for the master branch
    push:
        branches: [ master ]
    
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    build-ubuntu-2004:
        # The type of runner that the job will run on
        runs-on: ubuntu-20.04
        env:
            CONFIGURE_ARGS: >
                --prefix=/etc/nginx
                --sbin-path=/usr/sbin/nginx
                --modules-path=/usr/lib/nginx/modules
                --conf-path=/etc/nginx/nginx.conf
                --error-log-path=/var/log/nginx/error.log
                --http-log-path=/var/log/nginx/access.log
                --pid-path=/var/run/nginx.pid
                --lock-path=/var/run/nginx.lock
                --http-client-body-temp-path=/var/cache/nginx/client_temp
                --http-proxy-temp-path=/var/cache/nginx/proxy_temp
                --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
                --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp
                --http-scgi-temp-path=/var/cache/nginx/scgi_temp
                --user=nginx
                --group=nginx
                --with-compat
                --with-file-aio
                --with-threads
                --with-http_addition_module
                --with-http_auth_request_module
                --with-http_dav_module
                --with-http_flv_module
                --with-http_gunzip_module
                --with-http_gzip_static_module
                --with-http_mp4_module
                --with-http_random_index_module
                --with-http_realip_module
                --with-http_secure_link_module
                --with-http_slice_module
                --with-http_ssl_module
                --with-http_stub_status_module
                --with-http_sub_module
                --with-http_v2_module
                --with-mail
                --with-mail_ssl_module
                --with-stream
                --with-stream_realip_module
                --with-stream_ssl_module
                --with-stream_ssl_preread_module
                --with-pcre-jit
                --with-http_geoip_module
                --with-http_flv_module
                --with-http_image_filter_module
                --with-http_mp4_module
                --with-stream_geoip_module
                --add-module=../ngx_brotli
                --add-module=../ngx-fancyindex
                --add-module=../nginx-http-auth-digest
                --add-module=../njs/nginx
                --with-openssl=../libressl
                --with-pcre=../pcre2
                --with-zlib=../zlib
                
            
        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            - name: Checks-out repository
              uses: actions/checkout@v2
              with:
                submodules: 'recursive'
            
            - name: Install GCC
              uses: egor-tensin/setup-gcc@v1
              
            - name: Install libgd
              run: |
                sudo apt install -y libgd-dev
                
            - name: Install libgeoip
              run: |
                sudo apt install -y libgeoip-dev
            
            - name: Configure nginx
              run: |
                cd nginx
                ./auto/configure $CONFIGURE_ARGS --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'
                cd ..
                
            - name: Configure pcre2
              run: |
                cd pcre2
                ./autogen.sh
                cd ..
                
            - name: Configure libressl
              run: |
                cd libressl
                ./autogen.sh
                cd ..
        
            - name: Compile nginx
              run: |
                cd nginx
                make -j$(nproc)
                cd ..
                
            - name: Strip binary
              run: |
                strip --strip-unneeded nginx/objs/nginx
            
            - name: Upload artifact
              uses: actions/upload-artifact@v2.3.1
              with:
                name: nginx-${{runner.os}}-${{runner.arch}}-${{github.sha}}
                path: nginx/objs/nginx
            
            - name: Build ARM64 version
              uses: uraimo/run-on-arch-action@v2
              with:
                arch: aarch64
                distro: ubuntu20.04
                dockerRunArgs: |
                  --volume ".:/workspace"
                env: |
                  CONFIGURE_ARGS: ${{CONFIGURE_ARGS}}
                shell: /bin/bash
                install: |
                    sudo apt update
                    sudo apt upgrade -y
                    sudo apt install -y git build-essential binutil diffutil libgd-dev libgeoip-dev
                run: |
                    cd /workspace
                    make clean
                    
                    cd nginx
                    ./auto/configure $CONFIGURE_ARGS --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'
                    cd ..
                    
                    cd pcre2
                    ./autogen.sh
                    cd ..
                    
                    cd libressl
                    ./autogen.sh
                    cd ..
                    
                    cd nginx
                    make -j$(nproc)
                    cd ..
                    
                    strip --strip-unneeded nginx/objs/nginx
                    
